[package]
name = "ferroid"
version.workspace = true
rust-version.workspace = true
edition.workspace = true
license.workspace = true
authors.workspace = true
readme = "README.md"
description = "Flexible ID generators for producing unique, monotonic, and lexicographically sortable IDs."
repository = "https://github.com/s0l0ist/ferroid/blob/main/crates/ferroid"
categories = [
  "data-structures",    # Exposes structured types like ULID, SnowflakeId, etc.
  "encoding",           # Optional Base32 support (Crockford-style)
  "asynchronous",       # If using async stream generation features
  "no-std",             # Supports no_std-compatible environments
  "development-tools"   # Broad utility for developers building systems
]
documentation.workspace = true
keywords = ["no_std", "id", "snowflake", "ulid", "monotonic"]

[package.metadata.docs.rs]
all-features = true

[lib]
crate-type = ["rlib"]

[dependencies]
base32 = { workspace = true, optional = true }
crossbeam-utils = { workspace = true, optional = true }
futures = { workspace = true, optional = true }
parking_lot = { workspace = true, optional = true }
pin-project-lite = { workspace = true, optional = true }
portable-atomic = { workspace = true, features = ["require-cas"] }
rand = { workspace = true, optional = true, features = ["thread_rng"] }
serde = { workspace = true, optional = true, features = ["derive"] }
smol = { workspace = true, optional = true }
tokio = { workspace = true, optional = true, features = ["time", "rt-multi-thread"] }
tracing = { workspace = true, optional = true, features = ["attributes"] }

[dev-dependencies]
async-lock = { workspace = true }
criterion = { workspace = true, features = ["async_tokio", "async_smol"] }
futures = { workspace = true, features = ["alloc"] }
hdrhistogram = { workspace = true }
num_cpus = { workspace = true }
tokio = { workspace = true, features = ["macros", "sync"] }

[[bench]]
name = "bench"
harness = false

[features]
default = ["all"]
all = ["std", "alloc", "snowflake", "ulid", "thread-local", "basic", "lock", "atomic", "base32", "async-tokio", "async-smol"]

std = ["dep:rand", "portable-atomic/std"]
alloc = []
cache = ["dep:crossbeam-utils"]
parking-lot = ["std", "alloc", "dep:parking_lot"]
thread-local = ["std", "alloc", "ulid", "basic"]
snowflake = []
ulid = []
basic = []
lock = ["std", "alloc"]
atomic = []

tracing = ["dep:tracing"]
serde = ["dep:serde"]
base32 = ["dep:base32"]
futures = ["dep:futures", "dep:pin-project-lite"]
async-tokio = ["std", "alloc", "futures", "dep:tokio"]
async-smol = ["std", "alloc", "futures", "dep:smol"]