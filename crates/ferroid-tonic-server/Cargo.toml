[package]
name = "ferroid-tonic-server"
version.workspace = true
edition.workspace = true
license.workspace = true
authors.workspace = true
readme = "README.md"
description.workspace = true
repository.workspace = true
documentation.workspace = true
keywords.workspace = true
publish = true

[[bin]]
name = "ferroid-tonic-server"
path = "src/main.rs"

[dependencies]
anyhow = { workspace = true, features = ["std"] }
bytes = { workspace = true }
clap = { workspace = true, features = ["derive", "env", "color", "error-context", "help", "std", "suggestions", "usage"] }
dotenvy = { workspace = true }
ferroid-tonic-core = { version = "0.4.4", path = "../ferroid-tonic-core" }
futures = { workspace = true }
mimalloc = { workspace = true }
opentelemetry = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
opentelemetry-semantic-conventions = { workspace = true, optional = true, features = ["semconv_experimental"] }
opentelemetry-stdout = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
tokio = { workspace = true, features = ["parking_lot", "rt-multi-thread", "signal"] }
tokio-stream = { workspace = true }
tokio-util = { workspace = true }
tonic = { workspace = true, features = ["transport", "router", "zstd", "deflate", "gzip"] }
tonic-health = { workspace = true }
tonic-reflection = { workspace = true, features = ["server"] }
tonic-web = { workspace = true }
tower = { workspace = true }
tower-http = { workspace = true, features = ["cors"] }
tracing = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, features = ["smallvec", "fmt", "ansi", "tracing-log", "std", "env-filter", "json", "chrono"] }

[dev-dependencies]
criterion = { workspace = true, features = ["async_tokio"] }

[[bench]]
name = "bench"
harness = false

[features]
default = []
tracing = [
    "dep:tracing",
    "dep:opentelemetry",
    "opentelemetry?/trace",
    "dep:opentelemetry-otlp",
    "opentelemetry-otlp?/trace",
    "dep:opentelemetry_sdk",
    "opentelemetry_sdk?/trace",
    "dep:opentelemetry-semantic-conventions",
    "dep:tracing-opentelemetry"
]
metrics = [
    "dep:opentelemetry",
    "opentelemetry?/metrics",
    "dep:opentelemetry-otlp",
    "opentelemetry-otlp?/metrics",
    "dep:opentelemetry_sdk",
    "opentelemetry_sdk?/metrics",
    "dep:opentelemetry-semantic-conventions",
    "dep:tracing-opentelemetry",
    "tracing-opentelemetry?/metrics"
]
stdout = [
    "dep:opentelemetry-stdout",
    "opentelemetry-stdout?/trace",
    "opentelemetry-stdout?/metrics"
]
honeycomb = [
    "dep:opentelemetry-otlp",
    "opentelemetry-otlp?/tls",
    "opentelemetry-otlp?/gzip-tonic",
    "opentelemetry-otlp?/zstd-tonic",
    "opentelemetry-otlp?/grpc-tonic",
    "tonic/tls-native-roots"
]