syntax = "proto3";

package ferroid;

// High-throughput ID generation service.
//
// Provides a streaming interface for clients to request large batches of unique
// identifiers. IDs are returned as compact, binary-packed buffers to minimize
// overhead and maximize throughput.
//
// Ideal for use cases such as event ingestion, distributed databases, or
// systems that preallocate globally unique IDs at scale.
service IdGenerator {
  // Streams a specified number of unique IDs to the client.
  //
  // The client provides a `count`, and the server responds with a stream of
  // `IdChunk` messages. Each chunk contains a packed byte buffer of one or more
  // serialized Snowflake-style IDs.
  //
  // NOTE: The response is raw binary for performance. Clients must decode the
  // buffer using the expected ID type:
  // - For `u64`: 8 bytes per ID
  // - For `u128`: 16 bytes per ID
  //
  // The format is fixed-width, little-endian. Misaligned decoding will result
  // in incorrect values.
  rpc StreamIds (StreamIdsRequest) returns (stream IdChunk);
}

// Request for a batch of unique IDs.
//
// The client specifies how many unique IDs it needs. The server streams back
// binary chunks until the requested total is fulfilled.
message StreamIdsRequest {
  // Total number of unique IDs to generate and stream back.
  uint64 count = 1;
}

// A chunk of packed binary IDs.
//
// The `packed_ids` field is a contiguous byte buffer containing one or more
// fixed-size, little-endian encoded IDs.
//
// Clients must decode the buffer according to the agreed ID type:
// - `u64`: 8 bytes per ID
// - `u128`: 16 bytes per ID
//
// Invariants:
// - `packed_ids.length % ID_SIZE == 0`
// - Each chunk represents exactly one unique ID
message IdChunk {
  // Packed unique IDs in binary form.
  //
  // Encoding is fixed-width and little-endian. The server does not specify the
  // ID size; clients must decode consistently (typically 8 or 16 bytes).
  bytes packed_ids = 1;
}
